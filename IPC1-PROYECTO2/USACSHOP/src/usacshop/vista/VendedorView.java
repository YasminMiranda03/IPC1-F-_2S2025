/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package usacshop.vista;

import usacshop.vista.RegistrarClienteView;
import usacshop.controlador.VendedorControlador;
import usacshop.modelo.Producto;
import usacshop.modelo.Alimento;
import usacshop.modelo.Tecnologia;
import usacshop.modelo.General;
import usacshop.controlador.ManejadorProductos;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;      //para leer los archivos txt
import java.io.BufferedWriter;
import java.io.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.PrintWriter;

/**
 *
 * @author Katherin Yasmin
 */
public class VendedorView extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(VendedorView.class.getName());

    DefaultTableModel modeloProductos;
    private VendedorControlador controlador;
    private ManejadorProductos manejadorProductos; // maneja todos los productos

    
    /**
     * Creates new form VendedorView
     */
    public VendedorView() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("USAC SHOP - Vendedor");
        
        manejadorProductos = new ManejadorProductos(100);
        //para crear la tabla
        modeloProductos = new DefaultTableModel();
        modeloProductos.addColumn("Codigo");
        modeloProductos.addColumn("Nombre");
        modeloProductos.addColumn("Categoria");
        modeloProductos.addColumn("Detalle");
        modeloProductos.addColumn("Stock");
        
        tablaProductosVenta.setModel(modeloProductos);  //modelo
        cargarProductos();
        mostrarProductosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductosVenta = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        btnRegistrarVenta = new javax.swing.JButton();
        btnCerrarSesion = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnRegistrarCliente = new javax.swing.JButton();
        btnAgregarStock = new javax.swing.JButton();
        btnCargarStockCSV = new javax.swing.JButton();
        btnVerHistorialStock = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Panel de Vendedor");

        tablaProductosVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Categoria", "Acciones"
            }
        ));
        jScrollPane1.setViewportView(tablaProductosVenta);

        btnRegistrarVenta.setText("Registrar Venta");
        btnRegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarVentaActionPerformed(evt);
            }
        });

        btnCerrarSesion.setText("Cerrar sesion");
        btnCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionActionPerformed(evt);
            }
        });

        jLabel2.setText("Total de Venta:");

        txtTotal.setText("txtTotal");

        btnRegistrarCliente.setText("Gestion de Clientes");
        btnRegistrarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarClienteActionPerformed(evt);
            }
        });

        btnAgregarStock.setText("Agregar Stock");
        btnAgregarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarStockActionPerformed(evt);
            }
        });

        btnCargarStockCSV.setText("Cargar");
        btnCargarStockCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarStockCSVActionPerformed(evt);
            }
        });

        btnVerHistorialStock.setText("Historial Stock");
        btnVerHistorialStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerHistorialStockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnRegistrarVenta))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegistrarCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCerrarSesion)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jLabel1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregarStock)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCargarStockCSV)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnVerHistorialStock)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(72, 72, 72)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnAgregarStock)
                        .addGap(18, 18, 18)
                        .addComponent(btnCargarStockCSV)
                        .addGap(18, 18, 18)
                        .addComponent(btnVerHistorialStock)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegistrarVenta)
                    .addComponent(btnRegistrarCliente)
                    .addComponent(btnCerrarSesion))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void setControlador(VendedorControlador controlador) {
        this.controlador = controlador;
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------
    //METODOS PARA PRODUCTOS
    private String generarCodigoProducto(){
        File archivo = new File("productos.txt");
        int ultimoNumero = 0;
        
        if (archivo.exists()){
            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
                String linea;
                while ((linea = br.readLine()) != null) {
                    String[] datos = linea.split(",");
                    if (datos.length > 0) {
                        String codigo = datos[0].trim(); // P001
                        if (codigo.startsWith("P")) {
                            int num = Integer.parseInt(codigo.substring(1));
                            if (num > ultimoNumero) {
                                ultimoNumero = num;
                            }
                        }
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer productos para generar código: " + e.getMessage());
            }
        }
        int nuevoNumero = ultimoNumero + 1;
        return String.format("P%03d", nuevoNumero);
    }
    
    public void limpiarTablaProductos() {
        DefaultTableModel modelo = (DefaultTableModel) tablaProductosVenta.getModel();
        modelo.setRowCount(0);
    }

    public void agregarProductoATabla(Producto p, String stock) {
        DefaultTableModel modelo = (DefaultTableModel) tablaProductosVenta.getModel();
        modelo.addRow(new Object[]{
            p.getCodigo(),
            p.getNombre(),
            p.getCategoria(),
            p.getDetalle(),
            stock     
        });
    }
    private void mostrarProductosEnTabla() {
        modeloProductos.setRowCount(0); // limpiar tabla

        Producto[] lista = manejadorProductos.getProductos();
        for (int i = 0; i < manejadorProductos.getCantidad(); i++) {
            Producto p = lista[i];
            modeloProductos.addRow(new Object[]{
                p.getCodigo(),
                p.getNombre(),
                p.getCategoria(),
                p.getDetalle(),
                p.getStock()
            });
        }
    }
    
    // Método para cargar productos desde productos.txt
    private void cargarProductos() {
        File archivo = new File("productos.txt");
        if (!archivo.exists()) return;

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length < 4) continue;

                String codigo = datos[0].trim();
                String nombre = datos[1].trim();
                String categoria = datos[2].trim();
                String detalle = datos[3].trim();

                Producto p = null;

                switch (categoria.toLowerCase()) {
                    case "alimento":
                        p = new Alimento(codigo, nombre, categoria, detalle);
                        break;
                    case "tecnologia":
                        p = new Tecnologia(codigo, nombre, categoria, detalle);
                        break;
                    case "general":
                        p = new General(codigo, nombre, categoria, detalle);
                        break;
                    default:
                        continue;
                }

                if (p != null) {
                    manejadorProductos.agregarProducto(p);
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage());
        }
    }
    
    private void actualizarStockArchivo(String codigoProducto, int nuevoStock) {
        File archivo = new File("productos.txt");
        File temp = new File("productos_temp.txt");

        try (BufferedReader br = new BufferedReader(new FileReader(archivo));
             PrintWriter pw = new PrintWriter(new FileWriter(temp))) {

            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes[0].equals(codigoProducto)) {
                    partes[3] = String.valueOf(nuevoStock);
                    pw.println(String.join(",", partes));
                } else {
                    pw.println(linea);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar stock: " + e.getMessage());
            return;
        }

        archivo.delete();
        temp.renameTo(archivo);
    }
    
    private void btnRegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarVentaActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tablaProductosVenta.getSelectedRow();

        if (filaSeleccionada >= 0) {
            String codigo = (String) modeloProductos.getValueAt(filaSeleccionada, 0); // código
            String nombre = (String) modeloProductos.getValueAt(filaSeleccionada, 1); // nombre

            String cantidadStr = JOptionPane.showInputDialog(this, "Ingrese cantidad a vender:");
            if (cantidadStr != null) {
                int cantidadVenta;
                try {
                    cantidadVenta = Integer.parseInt(cantidadStr);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Ingrese un número válido.");
                    return;
                }

                if (cantidadVenta <= 0) {
                    JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor que cero.");
                    return;
                }

                // Registrar venta en archivo sin precio ni subtotal
                try (FileWriter fw = new FileWriter("ventas.txt", true);
                     PrintWriter pw = new PrintWriter(fw)) {
                    LocalDateTime fecha = LocalDateTime.now();
                    DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
                    String fechaHora = fecha.format(formato);

                    pw.println(codigo + "," + nombre + "," + cantidadVenta + "," + "0" + "," + "0" + "," + fechaHora);
                    JOptionPane.showMessageDialog(this, "Venta registrada de " + cantidadVenta + " " + nombre + "(s)");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error al ingresar la venta: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para vender.");
        }
    }//GEN-LAST:event_btnRegistrarVentaActionPerformed

       
    private void registrarVenta(String codigo, String nombre, int cantidad, double precioUnitario, double total) {
        try (FileWriter fw = new FileWriter("ventas.txt", true);
             PrintWriter pw = new PrintWriter(fw)) {

            LocalDateTime fecha = LocalDateTime.now();
            DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            String fechaHora = fecha.format(formato);

            pw.println(codigo + "," + nombre + "," + cantidad + "," + precioUnitario + "," + total + "," + fechaHora);
        }catch (IOException e){
            JOptionPane.showMessageDialog(this, "Error al ingresar la venta: " + e.getMessage());
            }
        } 
    
 

    private void btnCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionActionPerformed
        // TODO add your handling code here:
        LoginView login = new LoginView();
        login.setVisible(true);
        this.dispose();
         
    }//GEN-LAST:event_btnCerrarSesionActionPerformed

    private void btnRegistrarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarClienteActionPerformed
        // TODO add your handling code here:
        GestionClientesView clientes = new GestionClientesView();
        clientes.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegistrarClienteActionPerformed

    private void btnAgregarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarStockActionPerformed
        // TODO add your handling code here:
        String codigo = JOptionPane.showInputDialog(this, "Ingrese código del producto:");
        if (codigo == null || codigo.trim().isEmpty()) return;

        String cantidadStr = JOptionPane.showInputDialog(this, "Ingrese cantidad a registrar:");
        if (cantidadStr == null || cantidadStr.trim().isEmpty()) return;

        try {
            int cantidad = Integer.parseInt(cantidadStr);

            Producto p = manejadorProductos.buscarProductoPorCodigo(codigo);
            if (p != null) {
                p.setStock(p.getStock() + cantidad);
                mostrarProductosEnTabla();
                actualizarStockArchivo(codigo, p.getStock());
                JOptionPane.showMessageDialog(this, "Stock actualizado para " + p.getNombre());
            } else {
                JOptionPane.showMessageDialog(this, "Producto no encontrado.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Cantidad inválida");
        }
    }//GEN-LAST:event_btnAgregarStockActionPerformed

    private void btnCargarStockCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarStockCSVActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int seleccion = fc.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fc.getSelectedFile();
            controlador.cargarStockCSV(archivo, "Vendedor1");
            controlador.actualizarTabla();
        }
    }//GEN-LAST:event_btnCargarStockCSVActionPerformed

    private void btnVerHistorialStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerHistorialStockActionPerformed
        // TODO add your handling code here:
        controlador.verHistorial();
    }//GEN-LAST:event_btnVerHistorialStockActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new VendedorView().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarStock;
    private javax.swing.JButton btnCargarStockCSV;
    private javax.swing.JButton btnCerrarSesion;
    private javax.swing.JButton btnRegistrarCliente;
    private javax.swing.JButton btnRegistrarVenta;
    private javax.swing.JButton btnVerHistorialStock;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaProductosVenta;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
