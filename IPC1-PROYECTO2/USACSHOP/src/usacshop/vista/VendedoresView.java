/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package usacshop.vista;

import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.*;
import java.io.*;

/**
 *
 * @author Katherin Yasmin
 */
public class VendedoresView extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(VendedoresView.class.getName());
    
    DefaultTableModel modelo;
    
    private  static int contadorVendedores = 1;     //contador para codigo de los vendedores
    private int i = 0;
    /**
     * Creates new form VendedorView
     */
    public VendedoresView() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Gestion de Vendedores");
        
        modelo = new DefaultTableModel();
        modelo.addColumn("Codigo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Genero");
        modelo.addColumn("ContraseÃ±a");
        modelo.addColumn("Cantidad de ventas");
        
        tablaVendedores.setModel(modelo);
        cargarVendedores();
        
    }

    public void cargarVendedores(){
        modelo.setRowCount(0);
        File archivo = new File("vendedores.txt");
        if (!archivo.exists()) {
            try {
                archivo.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al crear archivo vendedores.txt");
                return;
            }
        }
        modelo.setRowCount(0); // limpiar tabla
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                
                String[] datos = linea.split(",");
                if (datos.length >= 4) {
                    String codigo = datos[0];
                    String nombre = datos[1];
                    String genero = datos[2];
                    String contrasena = datos[3];
                    String cantidadVentas = (datos.length >= 5) ? datos[4] : "0"; 

                    modelo.addRow(new Object[]{codigo, nombre, genero, contrasena, cantidadVentas});
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer vendedores: " + e.getMessage());
        }
    }
    private void guardarVendedores(){
        try(BufferedWriter bw = new BufferedWriter(new FileWriter("vendedores.txt"))){
            for (int i = 0; i < modelo.getRowCount(); i++){
                String codigo = modelo.getValueAt(i, 0).toString();
                String nombre = modelo.getValueAt(i, 1).toString();
                String genero = modelo.getValueAt(i, 2).toString();
                String contrasena = modelo.getValueAt(i, 3).toString();
                String cantidadVentas = modelo.getValueAt(i, 4).toString();
                
                bw.write(codigo + "," + nombre + "," + genero + "," + contrasena + "," +cantidadVentas);
                bw.newLine();
            }
        } catch (IOException e){
            JOptionPane.showMessageDialog(this, "Error al guardar vendedores; " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVendedores = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnCargarCSV = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion de Vendedores");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Gestion de Vendedores");

        tablaVendedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaVendedores);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnCargarCSV.setText("Cargar");
        btnCargarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarCSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCargarCSV)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegresar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCargarCSV))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar)
                    .addComponent(btnBuscar)
                    .addComponent(btnRegresar))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        String codigo = "V" + contadorVendedores++;
        String nombre = JOptionPane.showInputDialog("Ingrese el nombre del vendedor");
        String genero = JOptionPane.showInputDialog("Ingrese genero del vendedor");
        
        if (nombre != null && genero != null) {
        // Validar que el cÃ³digo no exista ya en la tabla
            boolean codigoExiste = false;
            for (int i = 0; i < modelo.getRowCount(); i++) {
                if (modelo.getValueAt(i, 0).toString().equalsIgnoreCase(codigo)) {
                    codigoExiste = true;
                    break;
                }
            }

            if (codigoExiste) {
                JOptionPane.showMessageDialog(this, "El cÃ³digo ya existe. Intente nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
                contadorVendedores--; // devolver el contador para no saltarse un nÃºmero
                return; // salir del mÃ©todo
            }

            // Si es Ãºnico, agregar a la tabla
            modelo.addRow(new Object[]{codigo, nombre, genero, "0"});
            guardarVendedores();
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        String codigoEliminar = JOptionPane.showInputDialog(this, "Ingrese el cÃ³digo del vendedor a eliminar:");
        if (codigoEliminar == null || codigoEliminar.trim().isEmpty()) {
            return; // Si el usuario cancelÃ³ o no ingresÃ³ nada
        }

        boolean encontrado = false;

        for (int i = 0; i < modelo.getRowCount(); i++) {
            String codigo = modelo.getValueAt(i, 0).toString();
            if (codigo.equalsIgnoreCase(codigoEliminar.trim())) {
                encontrado = true;

                int confirm = JOptionPane.showConfirmDialog(this,
                        "Â¿EstÃ¡ seguro de eliminar al vendedor " + modelo.getValueAt(i, 1) + "?",
                        "Confirmar eliminaciÃ³n", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    modelo.removeRow(i);
                    guardarVendedores();
                    JOptionPane.showMessageDialog(this, "Vendedor eliminado correctamente.");
                }
                break;
            }
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "No se encontrÃ³ un vendedor con ese cÃ³digo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        AdminView admin = new AdminView();
        admin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        // Pedir el cÃ³digo del vendedor a modificar
    String codigoBuscar = JOptionPane.showInputDialog(this, "Ingrese el cÃ³digo del vendedor a modificar:");
    if (codigoBuscar == null || codigoBuscar.trim().isEmpty()) {
        return; // Si cancelÃ³ o no escribiÃ³ nada
    }
    
    boolean encontrado = false;
    
    for (int i = 0; i < modelo.getRowCount(); i++) {
        String codigo = modelo.getValueAt(i, 0).toString();
            if (codigo.equalsIgnoreCase(codigoBuscar.trim())) {
                encontrado = true;

                String nombreActual = modelo.getValueAt(i, 1).toString();
                String contrasenaActual = modelo.getValueAt(i, 3).toString();

                String nuevoNombre = JOptionPane.showInputDialog(this, "Nuevo nombre:", nombreActual);
                String nuevaContrasena = JOptionPane.showInputDialog(this, "Nueva contraseÃ±a:", contrasenaActual);

                if (nuevoNombre != null && nuevaContrasena != null &&
                    !nuevoNombre.trim().isEmpty() && !nuevaContrasena.trim().isEmpty()) {

                    modelo.setValueAt(nuevoNombre.trim(), i, 1);
                    modelo.setValueAt(nuevaContrasena.trim(), i, 3);

                    guardarVendedores();
                    JOptionPane.showMessageDialog(this, "Vendedor modificado exitosamente.");
                } else {
                    JOptionPane.showMessageDialog(this, "No se ingresaron valores vÃ¡lidos.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                break; // Salimos del bucle al encontrarlo
            }
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "No se encontrÃ³ un vendedor con ese cÃ³digo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        String codigoBuscar = JOptionPane.showInputDialog(this, "Ingrese el cÃ³digo del vendedor a buscar:");
        if (codigoBuscar == null || codigoBuscar.trim().isEmpty()) {
            return; // Usuario cancelÃ³ o no escribiÃ³ nada
        }

        boolean encontrado = false;

        for (int i = 0; i < modelo.getRowCount(); i++) {
            String codigo = modelo.getValueAt(i, 0).toString();
            if (codigo.equalsIgnoreCase(codigoBuscar.trim())) {
                encontrado = true;

                String nombre = modelo.getValueAt(i, 1).toString();
                String genero = modelo.getValueAt(i, 2).toString();
                String contrasena = modelo.getValueAt(i, 3).toString();
                String ventas = modelo.getValueAt(i, 4).toString();

                JOptionPane.showMessageDialog(this,
                        "CÃ³digo: " + codigo +
                        "\nNombre: " + nombre +
                        "\nGÃ©nero: " + genero +
                        "\nContraseÃ±a: " + contrasena +
                        "\nVentas: " + ventas,
                        "Vendedor encontrado",
                        JOptionPane.INFORMATION_MESSAGE);
                break;
            }
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "No se encontrÃ³ un vendedor con ese cÃ³digo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnCargarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarCSVActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    int seleccion = fileChooser.showOpenDialog(this);

    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File archivoCSV = fileChooser.getSelectedFile();

        try (BufferedReader br = new BufferedReader(new FileReader(archivoCSV))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos.length >= 4) {
                    String codigo = datos[0].trim();
                    String nombre = datos[1].trim();
                    String genero = datos[2].trim();
                    String contrasena = datos[3].trim();

                    // Validar que el cÃ³digo sea Ãºnico
                    boolean existe = false;
                    for (int i = 0; i < modelo.getRowCount(); i++) {
                        if (modelo.getValueAt(i, 0).toString().equalsIgnoreCase(codigo)) {
                            existe = true;
                            break;
                        }
                    }
                    if (!existe) {
                        modelo.addRow(new Object[]{codigo, nombre, genero, contrasena, "0"});
                    }
                }
            }
            guardarVendedores(); // guarda todo en vendedores.txt
            JOptionPane.showMessageDialog(this, "CSV cargado exitosamente.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar CSV: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_btnCargarCSVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new VendedoresView().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCargarCSV;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaVendedores;
    // End of variables declaration//GEN-END:variables
}
